# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

type CryptoToken {
  createdAt: DateTime!
  financialAssets: FinancialAsset
  id: String!
  updatedAt: DateTime!
}

input CryptoTokenCreateInput {
  financialAssets: FinancialAssetWhereUniqueInput
}

input CryptoTokenOrderByInput {
  createdAt: SortOrder
  financialAssetsId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input CryptoTokenUpdateInput {
  financialAssets: FinancialAssetWhereUniqueInput
}

input CryptoTokenWhereInput {
  financialAssets: FinancialAssetWhereUniqueInput
  id: StringFilter
}

input CryptoTokenWhereUniqueInput {
  id: String!
}

type Currency {
  createdAt: DateTime!
  financialAssets: FinancialAsset
  id: String!
  updatedAt: DateTime!
}

input CurrencyCreateInput {
  financialAssets: FinancialAssetWhereUniqueInput
}

input CurrencyOrderByInput {
  createdAt: SortOrder
  financialAssetsId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input CurrencyUpdateInput {
  financialAssets: FinancialAssetWhereUniqueInput
}

input CurrencyWhereInput {
  financialAssets: FinancialAssetWhereUniqueInput
  id: StringFilter
}

input CurrencyWhereUniqueInput {
  id: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FinancialAsset {
  createdAt: DateTime!
  cryptoToken: CryptoToken
  currency: Currency
  id: String!
  updatedAt: DateTime!
}

input FinancialAssetCreateInput {
  cryptoToken: CryptoTokenWhereUniqueInput
  currency: CurrencyWhereUniqueInput
}

input FinancialAssetOrderByInput {
  createdAt: SortOrder
  cryptoTokenId: SortOrder
  currencyId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input FinancialAssetUpdateInput {
  cryptoToken: CryptoTokenWhereUniqueInput
  currency: CurrencyWhereUniqueInput
}

input FinancialAssetWhereInput {
  cryptoToken: CryptoTokenWhereUniqueInput
  currency: CurrencyWhereUniqueInput
  id: StringFilter
}

input FinancialAssetWhereUniqueInput {
  id: String!
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createCryptoToken(data: CryptoTokenCreateInput!): CryptoToken!
  createCurrency(data: CurrencyCreateInput!): Currency!
  createFinancialAsset(data: FinancialAssetCreateInput!): FinancialAsset!
  createUser(data: UserCreateInput!): User!
  deleteCryptoToken(where: CryptoTokenWhereUniqueInput!): CryptoToken!
  deleteCurrency(where: CurrencyWhereUniqueInput!): Currency!
  deleteFinancialAsset(where: FinancialAssetWhereUniqueInput!): FinancialAsset!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateCryptoToken(data: CryptoTokenUpdateInput!, where: CryptoTokenWhereUniqueInput!): CryptoToken!
  updateCurrency(data: CurrencyUpdateInput!, where: CurrencyWhereUniqueInput!): Currency!
  updateFinancialAsset(data: FinancialAssetUpdateInput!, where: FinancialAssetWhereUniqueInput!): FinancialAsset!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _cryptoTokensMeta(orderBy: [CryptoTokenOrderByInput!], skip: Float, take: Float, where: CryptoTokenWhereInput): MetaQueryPayload!
  _currenciesMeta(orderBy: [CurrencyOrderByInput!], skip: Float, take: Float, where: CurrencyWhereInput): MetaQueryPayload!
  _financialAssetsMeta(orderBy: [FinancialAssetOrderByInput!], skip: Float, take: Float, where: FinancialAssetWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  cryptoToken(where: CryptoTokenWhereUniqueInput!): CryptoToken
  cryptoTokens(orderBy: [CryptoTokenOrderByInput!], skip: Float, take: Float, where: CryptoTokenWhereInput): [CryptoToken!]!
  currencies(orderBy: [CurrencyOrderByInput!], skip: Float, take: Float, where: CurrencyWhereInput): [Currency!]!
  currency(where: CurrencyWhereUniqueInput!): Currency
  financialAsset(where: FinancialAssetWhereUniqueInput!): FinancialAsset
  financialAssets(orderBy: [FinancialAssetOrderByInput!], skip: Float, take: Float, where: FinancialAssetWhereInput): [FinancialAsset!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: [String!]!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: [String!]!
  username: String!
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: [String!]
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
